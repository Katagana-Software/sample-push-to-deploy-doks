name: Build and Deploy DemoApp to AKS

on:
  push:
    branches:
      - main

permissions:
  id-token: write   # For OIDC
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # ðŸ”¹ Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # ðŸ”¹ Azure login via OIDC
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      # ðŸ”¹ Installer kubelogin
      - name: Install kubelogin
        run: |
          curl -LO https://github.com/Azure/kubelogin/releases/latest/download/kubelogin-linux-amd64.zip
          sudo apt-get update && sudo apt-get install -y unzip
          unzip kubelogin-linux-amd64.zip -d kubelogin
          sudo mv kubelogin/bin/linux_amd64/kubelogin /usr/local/bin/
          kubelogin --version

      # ðŸ”¹ Hent kubeconfig fra AKS med admin creds
      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group rg-aks-prod \
            --name aks-prod \
            --overwrite-existing \
            --admin

      # ðŸ”¹ Login til ACR med OIDC
      - name: Login to ACR
        run: |
          az acr login --name acrkatagana.azurecr.io

      # ðŸ”¹ Build og push Docker image
      - name: Build and Push Docker image
        run: |
          IMAGE_TAG=acrkatagana.azurecr.io/demoapp:${{ github.sha }}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

      # ðŸ”¹ Opprett namespace hvis den ikke finnes
      - name: Ensure demoapp namespace exists
        run: |
          kubectl create namespace demoapp --dry-run=client -o yaml | kubectl apply -f -

      # ðŸ”¹ Appliker eksisterende demoapp.yaml
      - name: Apply demoapp manifest
        run: |
          kubectl apply -f k8s/demo-app.yaml

      # ðŸ”¹ Oppdater deployment med ny image og rollout
      - name: Deploy updated image
        run: |
          kubectl set image deployment/demoapp demoapp=$IMAGE_TAG -n demoapp
          kubectl rollout status deployment/demoapp -n demoapp
