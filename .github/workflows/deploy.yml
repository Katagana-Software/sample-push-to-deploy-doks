name: Deploy to AKS

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # ðŸ”¹ Sjekk ut repo
      - name: Checkout code
        uses: actions/checkout@v3

      # ðŸ”¹ Azure login (OIDC)
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # ðŸ”¹ Installer kubelogin (nÃ¸dvendig for AAD-enabled AKS)
      - name: Install kubelogin
        run: |
          curl -LO https://github.com/Azure/kubelogin/releases/latest/download/kubelogin-linux-amd64.zip
          sudo apt-get update && sudo apt-get install -y unzip
          unzip kubelogin-linux-amd64.zip -d kubelogin
          sudo mv kubelogin/bin/linux_amd64/kubelogin /usr/local/bin/
          kubelogin --version

      # ðŸ”¹ Hent kubeconfig fra AKS (Azure RBAC brukes)
      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group rg-aks-prod \
            --name aks-prod \
            --overwrite-existing

      # ðŸ”¹ Login til ACR med OIDC
      - name: ACR login
        uses: azure/docker-login@v2
        with:
          login-server: acr6064.azurecr.io

      # ðŸ”¹ Bygg og push Docker image
      - name: Build and Push Docker image
        run: |
          IMAGE=acr6064.azurecr.io/demoapp:${{ github.sha }}
          docker build -t $IMAGE .
          docker push $IMAGE
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      # ðŸ”¹ Deploy til AKS
      - name: Deploy to AKS
        run: |
          kubectl set image deployment/demoapp demoapp=$IMAGE
          kubectl rollout status deployment/demoapp
